<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://cssbristol.co.uk/feed.xml" rel="self" type="application/atom+xml" /><link href="https://cssbristol.co.uk/" rel="alternate" type="text/html" /><updated>2023-05-04T15:11:18+01:00</updated><id>https://cssbristol.co.uk/feed.xml</id><title type="html">CSS Bristol</title><subtitle>CSS is the University of Bristol Computer Science Society. We exist to represent, support and entertain all members of the Computer Science department.</subtitle><entry><title type="html">First Steps with Git</title><link href="https://cssbristol.co.uk/tutorial/2017/10/18/git.html" rel="alternate" type="text/html" title="First Steps with Git" /><published>2017-10-18T15:00:00+01:00</published><updated>2017-10-18T15:00:00+01:00</updated><id>https://cssbristol.co.uk/tutorial/2017/10/18/git</id><content type="html" xml:base="https://cssbristol.co.uk/tutorial/2017/10/18/git.html">&lt;p&gt;Git is a way to store, back up and organise your code. It is one of those things that you wish you’d been taught in your first term if you discover it later on.&lt;/p&gt;

&lt;p&gt;This tutorial assumes that you are moderately familiar with using a terminal/shell.&lt;/p&gt;

&lt;h2 id=&quot;installing&quot;&gt;Installing&lt;/h2&gt;

&lt;p&gt;The lab machines should have git installed already. On your own machine, type “git” in a terminal and if you’re lucky you’ll get the help text, showing it’s installed. If you need to install it yourself:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you’re using Linux, your package manager should provide it. Try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install git&lt;/code&gt; for debian and derivatives like ubuntu and mint. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo yum install git&lt;/code&gt; should work on Fedora.&lt;/li&gt;
  &lt;li&gt;On a Mac, if you’re using homebrew then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install git&lt;/code&gt; should do it, or you can download git from &lt;a href=&quot;https://git-scm.com/download/mac&quot;&gt;the website&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;On Windows, &lt;a href=&quot;https://git-for-windows.github.io/&quot;&gt;git for windows&lt;/a&gt; gives you git and an “open git here” option in the right-click menu of every folder.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;create-a-repository&quot;&gt;Create a repository&lt;/h2&gt;

&lt;p&gt;When you start on a new project or unit, create an empty folder, go to it in your terminal and type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt;. This creates a hidden subfolder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; which is your &lt;strong&gt;repository&lt;/strong&gt; - it will store the entire history of your project and every change you make, as long as you remember to commit these changes (which we’ll do soon). This not only gets you unlimited undo/redo, so you can try things out and undo them if they don’t work, but you can also maintain several different versions of your code and switch between them.&lt;/p&gt;

&lt;p&gt;The folder containing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; folder is your &lt;strong&gt;working tree&lt;/strong&gt; - one particular version of your project.&lt;/p&gt;

&lt;h2 id=&quot;making-commits&quot;&gt;Making commits&lt;/h2&gt;

&lt;p&gt;Let’s say you’ve written some code in a file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.c&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
  puts(&quot;Hello World!&quot;);
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; in your terminal. This will show that there’s an untracked change in file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.c&lt;/code&gt;. If colours are set up correctly, untracked changes are red and tracked ones are green.&lt;/p&gt;

&lt;p&gt;To tell git to track this change, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add hello.c&lt;/code&gt;. Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; again and you’ll see “new file: hello.c”, possibly in green. This means you’ve told git about this change, but it’s not committed yet (not saved in the repository). Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m &apos;New file&apos;&lt;/code&gt;. Each commit must have a message and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-m &amp;lt;message&amp;gt;&lt;/code&gt; option is a way to provide this. The single quotes around the message are to do with how your shell parses arguments - basically if you put single quotes around a commit message then you can use spaces, punctuation etc. and it should work as long as there’s no single quotes in your message itself. Do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; again and you should see “nothing to commit, working tree clean” which is a good message to see.&lt;/p&gt;

&lt;p&gt;The simplest way to work with git is this: make changes, commit changes, repeat. Git lets you undo/redo changes at the commit level so it’s helpful to make lots of small commits instead of few large ones; commit messages help you find commits when you want to e.g. revert to a particular commit.&lt;/p&gt;

&lt;p&gt;If you make a change to your source file - perhaps add a comma after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello&lt;/code&gt; - you’ll see “modified: hello.c” under a heading “Changes not staged for commit” (in red if colours are working). &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add hello.c&lt;/code&gt; tracks the change (it now appears under “Changes to be committed” in the status text), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m &apos;Added a comma&apos;&lt;/code&gt; commits it:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status
On branch master
Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)

        modified:   hello.c

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)

$ git add hello.c

$ git status

On branch master
Changes to be committed:
  (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)

        modified:   hello.c

$ git commit -m &apos;Added a comma.&apos;
[master 6e7e782] Added a comma.
1 file changed, 1 insertion(+), 1 deletion(-)

$ git status
On branch master
nothing to commit, working tree clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In summary:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; shows you whether there are any uncommitted changes in your repos.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add FILE&lt;/code&gt; tracks a change, but doesn’t commit it yet.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m &apos;MESSAGE&apos;&lt;/code&gt; commits all tracked changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If “git status” shows “working tree clean” then all your changes have been saved.&lt;/p&gt;

&lt;h2 id=&quot;reverting-changes&quot;&gt;Reverting changes&lt;/h2&gt;

&lt;p&gt;As you might have gathered already from the help text, if you’ve made changes to a file that you’ve not committed yet and you want to undo them back to the last commit, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout -- FILENAME&lt;/code&gt; reverts the file. There is a space both before and after the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt; in that command.&lt;/p&gt;

&lt;p&gt;If you’ve committed changes and want to go back to an earlier commit, the first thing you do is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; which shows you a list of all commits. If there are a lot, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log | less&lt;/code&gt; lets you view them one page at a time - advance with SPACE, exit with Q. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --oneline&lt;/code&gt; shows just one line per commit and you can stick &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;| less&lt;/code&gt; on the end of that too. Each commit has a hash value which is a long hexadecimal string. When referencing a commit, you usually only need to type the first few characters of the hash.&lt;/p&gt;

&lt;p&gt;Let’s say I decide I don’t want a comma after “Hello” after all.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log --oneline
6e7e782 Added a comma.
4f251ef New file

$ git checkout 4f25 hello.c`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout HASH FILENAME&lt;/code&gt; reverts the file to the state in the given commit. The file is now in “changed and not tracked” state as if you’d edited it by hand. You can also &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout HASH&lt;/code&gt;  filename to revert all files back to an older commit.&lt;/p&gt;

&lt;h2 id=&quot;excluding-files&quot;&gt;Excluding files&lt;/h2&gt;

&lt;p&gt;Let’s compile our file: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc hello.c -Wall -Werror -std=c99 -o hello&lt;/code&gt;. You do use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Wall -Werror&lt;/code&gt; on all your C programs to catch possible bugs, right?&lt;/p&gt;

&lt;p&gt;We now have two files in the working tree: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.c&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.exe&lt;/code&gt; if we’re on windows). However we don’t want to track &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello&lt;/code&gt; in the repository - you want your sources but not your compiled files in the repository. You can just compile the sources again whenever you need to, after all.&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; (yes, it starts with a dot) with one line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello.exe&lt;/code&gt;) in it. Each line in this file is treated as a pattern that matches one or more files (you can do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.exe&lt;/code&gt; to exclude all windows executables for example) that git should ignore. Adding the name of a folder to a gitignore file ignores that folder and everything in it. When you do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; again you’ll see that git ignores your executable file, but notices the new file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;. Add that file to the repository and commit.&lt;/p&gt;

&lt;h1 id=&quot;remote-repositories&quot;&gt;Remote repositories&lt;/h1&gt;

&lt;p&gt;So far we’ve just saved our project’s history in a subfolder on our own machine. The next step is to save it in the cloud so that several people can work on it together, or you can work on it from different machines (for example, home and lab PC).&lt;/p&gt;

&lt;p&gt;There are three big free providers of git services: &lt;a href=&quot;https://gitlab.com/&quot;&gt;gitlab&lt;/a&gt;, &lt;a href=&quot;https://github.com/&quot;&gt;github&lt;/a&gt; and &lt;a href=&quot;https://bitbucket.org/&quot;&gt;bitbucket&lt;/a&gt;. Gitlab and bitbucket offer you unlimited (within reason) free private repositories (where you control who can read/write them), github gives you one free private repository (5 if you sign up for their student pack with your university e-mail). All three providers offer unlimited free public repositories for open-source projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WARNING: do not under any circumstances place code that you have submitted or intend to submit as assessed coursework to a public repository on any provider. If another student finds this code and submits a copy of it, you are both in trouble for plagiarism. Yes, this has happened in the past.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The next few steps in this tutorial are based on the gitlab UI to create a remote repository, but github and bitbucket offer the same features.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to &lt;a href=&quot;https://gitlab.com&quot;&gt;gitlab.com&lt;/a&gt; and register an account.&lt;/li&gt;
  &lt;li&gt;Click “New project”, choose a project name and set visibility to private.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You get to see your project page. The git address of your project is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://gitlab.com/USERNAME/PROJECTNAME.git&lt;/code&gt;, so for example my username is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;david-bristol&lt;/code&gt; and I have a project called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;coconut&lt;/code&gt; that lives at &lt;a href=&quot;https://gitlab.com/david-bristol/coconut.git&quot;&gt;https://gitlab.com/david-bristol/coconut.git&lt;/a&gt;. If you access this link on the web, it’ll remove the “.git” part at the end but you need it in your terminal.&lt;/p&gt;

&lt;p&gt;The command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone ADDRESS&lt;/code&gt; downloads a repository and sets up some information so that you can synchronise the local and remote copies. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone https://gitlab.com/david-bristol/coconut.git&lt;/code&gt; will create a subfolder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;coconut&lt;/code&gt; with the contents of my coconut project. Since this is a public project, the files will just appear - for a private project, git will ask for your username and password first.&lt;/p&gt;

&lt;p&gt;You can now use the following two commands to synchronise the local and remote copies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt; pulls any changes from the remote copy to the local one.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt; pushes your local changes to the remote copy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is advised to use these commands only when your working tree is clean.&lt;/p&gt;

&lt;p&gt;The rough outline of setting up a git project to work together:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Everyone creates an account with the same provider.&lt;/li&gt;
  &lt;li&gt;One person creates the online repository and gives everyone else on the project access to it (assuming a private repository). On gitlab, choose settings/members in the left menu, enter the other developers’ gitlab usernames and set their role to “Developer” (the default “Guest” lets you read but not write).&lt;/li&gt;
  &lt;li&gt;Everyone clones the repository to their own machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The commands &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; add changes from your &lt;strong&gt;working tree&lt;/strong&gt; to the &lt;strong&gt;local copy of the repository&lt;/strong&gt;. The commands &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt; move committed changes from the &lt;strong&gt;local copy of the repository&lt;/strong&gt; to the &lt;strong&gt;remote copy of the repository&lt;/strong&gt; and back again. After pushing/pulling, all copies of the repository should be identical.&lt;/p&gt;

&lt;p&gt;Your daily coding routine:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt; to download any changes that your colleagues have made.&lt;/li&gt;
  &lt;li&gt;Make changes, commit, repeat. Once again: make small changes and commit frequently. This step only writes to the local copy of your repository and does not require internet access.&lt;/li&gt;
  &lt;li&gt;At the end of the day, or whenever you want to share code with others, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt;. This uploads your changes to the server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can save yourself a lot of trouble by only doing push/pull operations with a clean working tree, e.g. you’ve added and committed all changes to the local copy of your repository.
In theory, that’s all you need. In practice, what happens if two people edit the same file?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You do not have to agree via e-mail or some other system who is currently editing which files. Git is set up to handle this situation!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What happens is that your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt; will fail if someone else has pushed since your last pull. In this case, do a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt;. If you’ve both been editing different files, git will update the ones you haven’t changed with the new versions from the remote copy. Check that everything still works/compiles and then try and push again.&lt;/p&gt;

&lt;p&gt;If you’ve both been editing the same files, git will see if there’s an obvious way to combine your changes (for example you’ve both edited different functions in the same file). If so, all is well. If not, you have a conflict. The line &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONFLICT ...&lt;/code&gt; when you try and pull will alert you to this and tell you which files are affected (so will &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt;). When you open these files, you’ll see markers as follows in places where there’s a conflict (search for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; in your text editor to find them):&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
puts(&quot;Hello, world!&quot;);
=======
puts(&quot;Hi world!&quot;);
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 31be48e8e2a86fb71b0b0b61bb08019314d87a1b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This means that you tried to change a line to read &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts(&quot;Hello, world!&quot;);&lt;/code&gt; but someone else changed the same line to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts(&quot;Hi world!&quot;);&lt;/code&gt; since your last pull. Fix the conflict by choosing what to do with the line(s) in question and then delete the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&amp;lt; === &amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; marker lines and check that everything compiles and works again. Then you can add and commit the file and try to push again.&lt;/p&gt;

&lt;p&gt;Conflicts, although annoying, are nothing to be afraid of. They can happen as part of normal git working practice in a team and you deal with them as they happen.&lt;/p&gt;</content><author><name>David Bernhard</name></author><summary type="html">Git is a way to store, back up and organise your code. It is one of those things that you wish you’d been taught in your first term if you discover it later on. This tutorial assumes that you are moderately familiar with using a terminal/shell. Installing The lab machines should have git installed already. On your own machine, type “git” in a terminal and if you’re lucky you’ll get the help text, showing it’s installed. If you need to install it yourself: If you’re using Linux, your package manager should provide it. Try sudo apt install git for debian and derivatives like ubuntu and mint. sudo yum install git should work on Fedora. On a Mac, if you’re using homebrew then brew install git should do it, or you can download git from the website. On Windows, git for windows gives you git and an “open git here” option in the right-click menu of every folder. Create a repository When you start on a new project or unit, create an empty folder, go to it in your terminal and type git init. This creates a hidden subfolder .git which is your repository - it will store the entire history of your project and every change you make, as long as you remember to commit these changes (which we’ll do soon). This not only gets you unlimited undo/redo, so you can try things out and undo them if they don’t work, but you can also maintain several different versions of your code and switch between them. The folder containing the .git folder is your working tree - one particular version of your project. Making commits Let’s say you’ve written some code in a file hello.c: #include &amp;lt;stdio.h&amp;gt; int main() { puts(&quot;Hello World!&quot;); return 0; } Type git status in your terminal. This will show that there’s an untracked change in file hello.c. If colours are set up correctly, untracked changes are red and tracked ones are green. To tell git to track this change, run git add hello.c. Run git status again and you’ll see “new file: hello.c”, possibly in green. This means you’ve told git about this change, but it’s not committed yet (not saved in the repository). Run git commit -m &apos;New file&apos;. Each commit must have a message and the -m &amp;lt;message&amp;gt; option is a way to provide this. The single quotes around the message are to do with how your shell parses arguments - basically if you put single quotes around a commit message then you can use spaces, punctuation etc. and it should work as long as there’s no single quotes in your message itself. Do git status again and you should see “nothing to commit, working tree clean” which is a good message to see. The simplest way to work with git is this: make changes, commit changes, repeat. Git lets you undo/redo changes at the commit level so it’s helpful to make lots of small commits instead of few large ones; commit messages help you find commits when you want to e.g. revert to a particular commit. If you make a change to your source file - perhaps add a comma after Hello - you’ll see “modified: hello.c” under a heading “Changes not staged for commit” (in red if colours are working). git add hello.c tracks the change (it now appears under “Changes to be committed” in the status text), git commit -m &apos;Added a comma&apos; commits it: $ git status On branch master Changes not staged for commit: (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed) (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory) modified: hello.c no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;) $ git add hello.c $ git status On branch master Changes to be committed: (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage) modified: hello.c $ git commit -m &apos;Added a comma.&apos; [master 6e7e782] Added a comma. 1 file changed, 1 insertion(+), 1 deletion(-) $ git status On branch master nothing to commit, working tree clean In summary: git status shows you whether there are any uncommitted changes in your repos. git add FILE tracks a change, but doesn’t commit it yet. git commit -m &apos;MESSAGE&apos; commits all tracked changes. If “git status” shows “working tree clean” then all your changes have been saved. Reverting changes As you might have gathered already from the help text, if you’ve made changes to a file that you’ve not committed yet and you want to undo them back to the last commit, git checkout -- FILENAME reverts the file. There is a space both before and after the -- in that command. If you’ve committed changes and want to go back to an earlier commit, the first thing you do is git log which shows you a list of all commits. If there are a lot, git log | less lets you view them one page at a time - advance with SPACE, exit with Q. git log --oneline shows just one line per commit and you can stick | less on the end of that too. Each commit has a hash value which is a long hexadecimal string. When referencing a commit, you usually only need to type the first few characters of the hash. Let’s say I decide I don’t want a comma after “Hello” after all. $ git log --oneline 6e7e782 Added a comma. 4f251ef New file $ git checkout 4f25 hello.c` The command git checkout HASH FILENAME reverts the file to the state in the given commit. The file is now in “changed and not tracked” state as if you’d edited it by hand. You can also git checkout HASH filename to revert all files back to an older commit. Excluding files Let’s compile our file: gcc hello.c -Wall -Werror -std=c99 -o hello. You do use -Wall -Werror on all your C programs to catch possible bugs, right? We now have two files in the working tree: hello.c and hello (or hello.exe if we’re on windows). However we don’t want to track hello in the repository - you want your sources but not your compiled files in the repository. You can just compile the sources again whenever you need to, after all. Create a file called .gitignore (yes, it starts with a dot) with one line hello (or hello.exe) in it. Each line in this file is treated as a pattern that matches one or more files (you can do *.exe to exclude all windows executables for example) that git should ignore. Adding the name of a folder to a gitignore file ignores that folder and everything in it. When you do git status again you’ll see that git ignores your executable file, but notices the new file .gitignore. Add that file to the repository and commit. Remote repositories So far we’ve just saved our project’s history in a subfolder on our own machine. The next step is to save it in the cloud so that several people can work on it together, or you can work on it from different machines (for example, home and lab PC). There are three big free providers of git services: gitlab, github and bitbucket. Gitlab and bitbucket offer you unlimited (within reason) free private repositories (where you control who can read/write them), github gives you one free private repository (5 if you sign up for their student pack with your university e-mail). All three providers offer unlimited free public repositories for open-source projects. WARNING: do not under any circumstances place code that you have submitted or intend to submit as assessed coursework to a public repository on any provider. If another student finds this code and submits a copy of it, you are both in trouble for plagiarism. Yes, this has happened in the past. The next few steps in this tutorial are based on the gitlab UI to create a remote repository, but github and bitbucket offer the same features. Go to gitlab.com and register an account. Click “New project”, choose a project name and set visibility to private. You get to see your project page. The git address of your project is https://gitlab.com/USERNAME/PROJECTNAME.git, so for example my username is david-bristol and I have a project called coconut that lives at https://gitlab.com/david-bristol/coconut.git. If you access this link on the web, it’ll remove the “.git” part at the end but you need it in your terminal. The command git clone ADDRESS downloads a repository and sets up some information so that you can synchronise the local and remote copies. For example, git clone https://gitlab.com/david-bristol/coconut.git will create a subfolder coconut with the contents of my coconut project. Since this is a public project, the files will just appear - for a private project, git will ask for your username and password first. You can now use the following two commands to synchronise the local and remote copies: git pull pulls any changes from the remote copy to the local one. git push pushes your local changes to the remote copy. It is advised to use these commands only when your working tree is clean. The rough outline of setting up a git project to work together: Everyone creates an account with the same provider. One person creates the online repository and gives everyone else on the project access to it (assuming a private repository). On gitlab, choose settings/members in the left menu, enter the other developers’ gitlab usernames and set their role to “Developer” (the default “Guest” lets you read but not write). Everyone clones the repository to their own machine. The commands git add and git commit add changes from your working tree to the local copy of the repository. The commands git push and git pull move committed changes from the local copy of the repository to the remote copy of the repository and back again. After pushing/pulling, all copies of the repository should be identical. Your daily coding routine: git pull to download any changes that your colleagues have made. Make changes, commit, repeat. Once again: make small changes and commit frequently. This step only writes to the local copy of your repository and does not require internet access. At the end of the day, or whenever you want to share code with others, git push. This uploads your changes to the server. You can save yourself a lot of trouble by only doing push/pull operations with a clean working tree, e.g. you’ve added and committed all changes to the local copy of your repository. In theory, that’s all you need. In practice, what happens if two people edit the same file? You do not have to agree via e-mail or some other system who is currently editing which files. Git is set up to handle this situation! What happens is that your git push will fail if someone else has pushed since your last pull. In this case, do a git pull. If you’ve both been editing different files, git will update the ones you haven’t changed with the new versions from the remote copy. Check that everything still works/compiles and then try and push again. If you’ve both been editing the same files, git will see if there’s an obvious way to combine your changes (for example you’ve both edited different functions in the same file). If so, all is well. If not, you have a conflict. The line CONFLICT ... when you try and pull will alert you to this and tell you which files are affected (so will git status). When you open these files, you’ll see markers as follows in places where there’s a conflict (search for &amp;lt;&amp;lt;&amp;lt; in your text editor to find them): &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD puts(&quot;Hello, world!&quot;); ======= puts(&quot;Hi world!&quot;); &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 31be48e8e2a86fb71b0b0b61bb08019314d87a1b This means that you tried to change a line to read puts(&quot;Hello, world!&quot;); but someone else changed the same line to puts(&quot;Hi world!&quot;); since your last pull. Fix the conflict by choosing what to do with the line(s) in question and then delete the &amp;lt;&amp;lt;&amp;lt; === &amp;gt;&amp;gt;&amp;gt; marker lines and check that everything compiles and works again. Then you can add and commit the file and try to push again. Conflicts, although annoying, are nothing to be afraid of. They can happen as part of normal git working practice in a team and you deal with them as they happen.</summary></entry><entry><title type="html">Advice for Second Years</title><link href="https://cssbristol.co.uk/2017/09/24/second-year-advice.html" rel="alternate" type="text/html" title="Advice for Second Years" /><published>2017-09-24T14:00:00+01:00</published><updated>2017-09-24T14:00:00+01:00</updated><id>https://cssbristol.co.uk/2017/09/24/second-year-advice</id><content type="html" xml:base="https://cssbristol.co.uk/2017/09/24/second-year-advice.html">&lt;p&gt;The second year of Computer Science at Bristol is a tough one - here’s a thread of valuable tips from students who’ve seen it through.&lt;/p&gt;

&lt;h2 id=&quot;note-to-my-younger-self-advice-for-thriving-in-second-year&quot;&gt;Note to my younger self: advice for thriving in second year&lt;/h2&gt;

&lt;p&gt;Ok so if I was to give advice to my younger self what would it be……..hmmm good question.&lt;/p&gt;

&lt;p&gt;Here goes…….Don’t feel overwhelmed. Focus on a small problem, solve that and find your next small
problem. Repeat. Understand that not everybody gets it even though it may seem that way. The
lectures don’t always relate to the coursework, google is your friend, stay calm and take one step at a
time.&lt;/p&gt;

&lt;p&gt;Figure out what you enjoy and be the best you can at it. You won’t always find every subject easy but
when you find the one that gives you a buzz, take it by the horns and immerse yourself in it.
Find a good friend to talk to about a problem that you are struggling with even if they aren’t on the
same course as you. As you are discussing the problem you’ll find that things will become clearer,
you’ll spot how to break it into down into bitesize chunks and usually figure out a simple answer and
wonder why you were so worried about it in the first place.&lt;/p&gt;

&lt;p&gt;Use your mentor if you have one or someone in the year above. If you don’t have one already (or
want another one), just ask. They will have already gone through what you are currently facing and
have come out the other side. Ask them for guidance, support or a gentle nudge in the right direction,
maybe over a Dominos pizza in MVB atrium (I fondly miss their student discount!).&lt;/p&gt;

&lt;p&gt;And finally, if you don’t already, set yourself a goal for something you want to achieve after graduating
and finding work. I told myself that I wanted my name to be in the credits of a Hollywood movie before
I was 25. I still remember the amazing feeling staying till the end of ‘John Carter’ and seeing my name
up on the big screen. All the hard work and struggles you will have faced to get this far will feel so so
worth it.&lt;/p&gt;

&lt;p&gt;Sophie would also like to add that for the girls especially (but not exclusively) that it might be worth
having a quick read up on stereotype threats &lt;a href=&quot;http://en.wikipedia.org/wiki/Stereotype_threat&quot;&gt;http://en.wikipedia.org/wiki/Stereotype_threat&lt;/a&gt;. She also
went through some struggles in second year and wish she had known about this at the time.&lt;/p&gt;

&lt;p&gt;(I hope it helps) and if anyone has any more questions feel free to get in touch through Caroline.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- Chris Priscott - Double Negative&lt;/em&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Awesome advice Chris! A couple of other things that also sprang to mind:
There’s absolute no shame in asking for help! Sometimes it can be really daunting putting your hand
up in lectures when the lecturer asks if there are any questions and the whole room is silent, but
Bristol has a really great open door policy with their lecturers. If you’re confused over the content of a
lecture or a coursework then from experience I found they were all usually very happy to sit down and
discuss it with me after the lecture - if nothing else I found that most lecturers just really like talking
about their chosen topics of interest! If it’s too intimidating going on your own grab a friend who’s also
confused (because there is no way you’re the only one, even if it seems that way) and go together.&lt;/p&gt;

&lt;p&gt;Software development is a collaborative effort, even if it doesn’t feel like it at uni. When you hit the
“real world” pretty much everyone accepts that open discussion leads to better developers. I’ll preface
this bit with ‘Don’t copy each others code because that’s plagiarism and I don’t want to get you into
trouble’ but there’s absolutely nothing wrong with closing the laptops, sitting down with some other
people from the course and going “Right… What the hell is this coursework asking of us?”&lt;/p&gt;

&lt;p&gt;Finally, find something you enjoy outside of your course. Join a society or two and give yourself
evenings off - there’s more to university life than just your degree subject and besides, that error
message you’ve been staring at for the last 6 hours? Not going to happen now. Sometimes the best
thing you can do is to step away from your computer and come back to it later.&lt;/p&gt;

&lt;p&gt;Second year was the worst year for me too. I never particularly enjoyed the hardcore theoretical units
that we got taught in first and second year, and only really started to enjoy the course when we got to
third year and could pick modules that actually interested us - there’s more than one way to be a
Software Developer, and if one specific area doesn’t interest you then that’s completely fine, there are
literally hundreds of other areas that might suit you better!&lt;/p&gt;

&lt;p&gt;I also found this article a really interesting read: &lt;a href=&quot;https://medium.com/@aliciatweet/overcoming-impostor-syndrome-bdae04e46ec5&quot;&gt;https://medium.com/@aliciatweet/overcoming-impostor-syndrome-bdae04e46ec5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- Tess Conway&lt;/em&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Just to quickly reiterate some of the really good points made above! Ask plenty of questions, speak
openly to your lecturers and try and get excited about the topics you’re studying. In my second year I
had no idea what I wanted to do, I was on a joint honors degree (Maths &amp;amp; CS) that I wasn’t enjoying
(and borderline failing) with no job ambitions. Second year was tough, I had no say in what I wanted
to study. However, I knew making a move to Computer Science would allow me to study new and
exciting things in my third year. A year later, it was a totally different story. I was in the middle of the Games project with a great group of friends and enrolled in modules that really interested me (mainly
Computer graphics). From this point I started to have some idea about what sort of career I wanted
once I finished at Bristol, and this sort of motivation really helped! So, what got me through my second
year? Cider, hard work and a good group of friends. There was a core group of us all in the same
boat, struggling along, but pushing through the year together. Of course, plagiarism is bad, but like
Tess said, discussions are healthy and extremely productive. At the end of day, it’s all about
understanding the problem, not necessarily writing perfect code. Getting a second (or third) opinion
on something is common practice in my day-to- day at Double Negative! Second year is tough, but it
gets better. Looking back at my time at Bristol the best times were in years three and four. So keep
your chin up and power through!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- Ian Lawson&lt;/em&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Everyone’s points are so true! Ok, mine would be: Definitely find yourself something to do outside of
your course ( preferably something that takes you out of your working environment, so going to see
movies or going on walks, join a sports team, go sketching etc.). I know what you’re thinking, there is
literally no time to do anything but coursework, and if I ‘take a break’ I’ll fall behind. This is not true! It’s so refreshing to have something other than your course to spend time and effort on, and it’ll help you avoid burnout too. I wish I had done this, I know now it would have reduced my stress levels
massively and also meant I would have spent time following other interests at university too.&lt;/p&gt;

&lt;p&gt;Secondly, find someone within the department that you can talk to, your tutor, or Caroline, or anyone
you feel comfortable with. You are not alone in what you are going through, and if you talk to
someone in the department, they could help you if you are feeling overwhelmed. It’s also a good idea
because then you’re offloading a lot of what is going through your head and this takes some of the
pressure off. Even if you don’t like talking to people, or discussing any of the problems you may be
experiencing, I would really encourage you to find the time to send an email or talk to a friend about
your stress, it does help!&lt;/p&gt;

&lt;p&gt;Thirdly, divide and conquer! Everything seems overwhelming, the never ending coursework, the
exams, the looming deadlines. But break this down into your priorities for the current period and build
yourself up a schedule. Look at a coursework as a series of goal, e.g. ‘Rig the model’, ‘Draft 7 slides
for HCI presentation’, just small steps that will lead you to where you need to be.
We all know what you’re currently experiencing, I have been there before too, so I would really
encourage you to set aside time for yourself and break down your workload into achievable chunks.
Don’t compare yourself to your peers, they are on a different journey, what matters is making sure you
are doing what’s best for you. Make sure you make time for you and that you’re taking care of your
health and your mind, I can’t emphasise that enough! Good luck! If you want to pass on my email,
that’s fine too!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- Harshna Patel&lt;/em&gt;&lt;/p&gt;</content><author><name>Louis Heath, Chris Priscott, Tess Conway, Ian Lawson, Harshna Patel</name></author><summary type="html">The second year of Computer Science at Bristol is a tough one - here’s a thread of valuable tips from students who’ve seen it through. Note to my younger self: advice for thriving in second year Ok so if I was to give advice to my younger self what would it be……..hmmm good question. Here goes…….Don’t feel overwhelmed. Focus on a small problem, solve that and find your next small problem. Repeat. Understand that not everybody gets it even though it may seem that way. The lectures don’t always relate to the coursework, google is your friend, stay calm and take one step at a time. Figure out what you enjoy and be the best you can at it. You won’t always find every subject easy but when you find the one that gives you a buzz, take it by the horns and immerse yourself in it. Find a good friend to talk to about a problem that you are struggling with even if they aren’t on the same course as you. As you are discussing the problem you’ll find that things will become clearer, you’ll spot how to break it into down into bitesize chunks and usually figure out a simple answer and wonder why you were so worried about it in the first place. Use your mentor if you have one or someone in the year above. If you don’t have one already (or want another one), just ask. They will have already gone through what you are currently facing and have come out the other side. Ask them for guidance, support or a gentle nudge in the right direction, maybe over a Dominos pizza in MVB atrium (I fondly miss their student discount!). And finally, if you don’t already, set yourself a goal for something you want to achieve after graduating and finding work. I told myself that I wanted my name to be in the credits of a Hollywood movie before I was 25. I still remember the amazing feeling staying till the end of ‘John Carter’ and seeing my name up on the big screen. All the hard work and struggles you will have faced to get this far will feel so so worth it. Sophie would also like to add that for the girls especially (but not exclusively) that it might be worth having a quick read up on stereotype threats http://en.wikipedia.org/wiki/Stereotype_threat. She also went through some struggles in second year and wish she had known about this at the time. (I hope it helps) and if anyone has any more questions feel free to get in touch through Caroline. - Chris Priscott - Double Negative   Awesome advice Chris! A couple of other things that also sprang to mind: There’s absolute no shame in asking for help! Sometimes it can be really daunting putting your hand up in lectures when the lecturer asks if there are any questions and the whole room is silent, but Bristol has a really great open door policy with their lecturers. If you’re confused over the content of a lecture or a coursework then from experience I found they were all usually very happy to sit down and discuss it with me after the lecture - if nothing else I found that most lecturers just really like talking about their chosen topics of interest! If it’s too intimidating going on your own grab a friend who’s also confused (because there is no way you’re the only one, even if it seems that way) and go together. Software development is a collaborative effort, even if it doesn’t feel like it at uni. When you hit the “real world” pretty much everyone accepts that open discussion leads to better developers. I’ll preface this bit with ‘Don’t copy each others code because that’s plagiarism and I don’t want to get you into trouble’ but there’s absolutely nothing wrong with closing the laptops, sitting down with some other people from the course and going “Right… What the hell is this coursework asking of us?” Finally, find something you enjoy outside of your course. Join a society or two and give yourself evenings off - there’s more to university life than just your degree subject and besides, that error message you’ve been staring at for the last 6 hours? Not going to happen now. Sometimes the best thing you can do is to step away from your computer and come back to it later. Second year was the worst year for me too. I never particularly enjoyed the hardcore theoretical units that we got taught in first and second year, and only really started to enjoy the course when we got to third year and could pick modules that actually interested us - there’s more than one way to be a Software Developer, and if one specific area doesn’t interest you then that’s completely fine, there are literally hundreds of other areas that might suit you better! I also found this article a really interesting read: https://medium.com/@aliciatweet/overcoming-impostor-syndrome-bdae04e46ec5 - Tess Conway   Just to quickly reiterate some of the really good points made above! Ask plenty of questions, speak openly to your lecturers and try and get excited about the topics you’re studying. In my second year I had no idea what I wanted to do, I was on a joint honors degree (Maths &amp;amp; CS) that I wasn’t enjoying (and borderline failing) with no job ambitions. Second year was tough, I had no say in what I wanted to study. However, I knew making a move to Computer Science would allow me to study new and exciting things in my third year. A year later, it was a totally different story. I was in the middle of the Games project with a great group of friends and enrolled in modules that really interested me (mainly Computer graphics). From this point I started to have some idea about what sort of career I wanted once I finished at Bristol, and this sort of motivation really helped! So, what got me through my second year? Cider, hard work and a good group of friends. There was a core group of us all in the same boat, struggling along, but pushing through the year together. Of course, plagiarism is bad, but like Tess said, discussions are healthy and extremely productive. At the end of day, it’s all about understanding the problem, not necessarily writing perfect code. Getting a second (or third) opinion on something is common practice in my day-to- day at Double Negative! Second year is tough, but it gets better. Looking back at my time at Bristol the best times were in years three and four. So keep your chin up and power through! - Ian Lawson   Everyone’s points are so true! Ok, mine would be: Definitely find yourself something to do outside of your course ( preferably something that takes you out of your working environment, so going to see movies or going on walks, join a sports team, go sketching etc.). I know what you’re thinking, there is literally no time to do anything but coursework, and if I ‘take a break’ I’ll fall behind. This is not true! It’s so refreshing to have something other than your course to spend time and effort on, and it’ll help you avoid burnout too. I wish I had done this, I know now it would have reduced my stress levels massively and also meant I would have spent time following other interests at university too. Secondly, find someone within the department that you can talk to, your tutor, or Caroline, or anyone you feel comfortable with. You are not alone in what you are going through, and if you talk to someone in the department, they could help you if you are feeling overwhelmed. It’s also a good idea because then you’re offloading a lot of what is going through your head and this takes some of the pressure off. Even if you don’t like talking to people, or discussing any of the problems you may be experiencing, I would really encourage you to find the time to send an email or talk to a friend about your stress, it does help! Thirdly, divide and conquer! Everything seems overwhelming, the never ending coursework, the exams, the looming deadlines. But break this down into your priorities for the current period and build yourself up a schedule. Look at a coursework as a series of goal, e.g. ‘Rig the model’, ‘Draft 7 slides for HCI presentation’, just small steps that will lead you to where you need to be. We all know what you’re currently experiencing, I have been there before too, so I would really encourage you to set aside time for yourself and break down your workload into achievable chunks. Don’t compare yourself to your peers, they are on a different journey, what matters is making sure you are doing what’s best for you. Make sure you make time for you and that you’re taking care of your health and your mind, I can’t emphasise that enough! Good luck! If you want to pass on my email, that’s fine too! - Harshna Patel</summary></entry><entry><title type="html">CSS joins Strava!</title><link href="https://cssbristol.co.uk/2017/08/30/strava.html" rel="alternate" type="text/html" title="CSS joins Strava!" /><published>2017-08-30T22:00:00+01:00</published><updated>2017-08-30T22:00:00+01:00</updated><id>https://cssbristol.co.uk/2017/08/30/strava</id><content type="html" xml:base="https://cssbristol.co.uk/2017/08/30/strava.html">&lt;p&gt;&lt;strong&gt;Who said nerds have to be unfit?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.strava.com/clubs/cssbristol&quot;&gt;Join the club&lt;/a&gt; on Strava for friendly competition and motivation!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/contrib/blog/2017-08-30-nerd-run.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Louis Heath</name></author><summary type="html">Who said nerds have to be unfit? Join the club on Strava for friendly competition and motivation!</summary></entry><entry><title type="html">CSS Goes Outside: join a sports team!</title><link href="https://cssbristol.co.uk/2016/10/02/CSS-goes-outside-join-a-sports-team.html" rel="alternate" type="text/html" title="CSS Goes Outside: join a sports team!" /><published>2016-10-02T19:39:00+01:00</published><updated>2016-10-02T19:39:00+01:00</updated><id>https://cssbristol.co.uk/2016/10/02/CSS-goes-outside-join-a-sports-team</id><content type="html" xml:base="https://cssbristol.co.uk/2016/10/02/CSS-goes-outside-join-a-sports-team.html">&lt;p&gt;Interested in (casually!) playing one of these sports in a CS team?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;5-aside/11-aside football&lt;/li&gt;
  &lt;li&gt;Mixed hockey&lt;/li&gt;
  &lt;li&gt;Badminton&lt;/li&gt;
  &lt;li&gt;Basketball&lt;/li&gt;
  &lt;li&gt;Women’s 5-aside football&lt;/li&gt;
  &lt;li&gt;Indoor cricket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us know ASAP - league places fill up fast - and we’ll do our best to get some of these teams up and running.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;btn btn--dark&quot; href=&quot;mailto:sports@cssbristol.co.uk&quot;&gt;
  Tell us what you want to do!
&lt;/a&gt;&lt;/p&gt;</content><author><name>Ross Gardiner</name></author><summary type="html">Interested in (casually!) playing one of these sports in a CS team? 5-aside/11-aside football Mixed hockey Badminton Basketball Women’s 5-aside football Indoor cricket Let us know ASAP - league places fill up fast - and we’ll do our best to get some of these teams up and running. Tell us what you want to do!</summary></entry><entry><title type="html">Sign up to the CSS mailing list and WIN!</title><link href="https://cssbristol.co.uk/2016/09/24/email-newsletter-signup.html" rel="alternate" type="text/html" title="Sign up to the CSS mailing list and WIN!" /><published>2016-09-24T13:06:00+01:00</published><updated>2016-09-24T13:06:00+01:00</updated><id>https://cssbristol.co.uk/2016/09/24/email-newsletter-signup</id><content type="html" xml:base="https://cssbristol.co.uk/2016/09/24/email-newsletter-signup.html">&lt;p&gt;This year, we’re starting a monthly(-ish) email newsletter. Find out about CSS events, news, trips and job postings.&lt;/p&gt;

&lt;h2 id=&quot;i-hear-there-are-prizes&quot;&gt;I hear there are prizes?&lt;/h2&gt;

&lt;p&gt;Yes - it’s true! Win a Raspberry Pi Zero with an 8GB MicroSD; WiFi adapter; MiniHDMI and MiniUSB adapters. All you need to do is sign up for the shiny new CSS mailing list before 6pm on Friday September 30!&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;btn btn--dark&quot; href=&quot;https://docs.google.com/a/cssbristol.co.uk/forms/d/e/1FAIpQLSdFG_iaSFe6nNiTpm7b6euwwBVxG0yHxWRz18rxlQfmk2YvLg/viewform&quot;&gt;
  Get the newsletter
&lt;/a&gt;&lt;/p&gt;</content><author><name>Ross Gardiner</name></author><summary type="html">This year, we’re starting a monthly(-ish) email newsletter. Find out about CSS events, news, trips and job postings. I hear there are prizes? Yes - it’s true! Win a Raspberry Pi Zero with an 8GB MicroSD; WiFi adapter; MiniHDMI and MiniUSB adapters. All you need to do is sign up for the shiny new CSS mailing list before 6pm on Friday September 30! Get the newsletter</summary></entry><entry><title type="html">Welcome!</title><link href="https://cssbristol.co.uk/2016/08/19/welcome.html" rel="alternate" type="text/html" title="Welcome!" /><published>2016-08-19T22:22:00+01:00</published><updated>2016-08-19T22:22:00+01:00</updated><id>https://cssbristol.co.uk/2016/08/19/welcome</id><content type="html" xml:base="https://cssbristol.co.uk/2016/08/19/welcome.html">&lt;p&gt;Hello and welcome to all of you who will be joining us this year.&lt;/p&gt;

&lt;p&gt;Sidle on over to our dedicated &lt;a href=&quot;/pages/freshers/&quot;&gt;freshers’ page&lt;/a&gt; for more information.&lt;/p&gt;</content><author><name>Ross Gardiner</name></author><summary type="html">Hello and welcome to all of you who will be joining us this year. Sidle on over to our dedicated freshers’ page for more information.</summary></entry><entry><title type="html">Lecturer of the year 2015/16</title><link href="https://cssbristol.co.uk/2016/08/15/lecturer-of-the-year-2015-16.html" rel="alternate" type="text/html" title="Lecturer of the year 2015/16" /><published>2016-08-15T17:04:00+01:00</published><updated>2016-08-15T17:04:00+01:00</updated><id>https://cssbristol.co.uk/2016/08/15/lecturer-of-the-year-2015-16</id><content type="html" xml:base="https://cssbristol.co.uk/2016/08/15/lecturer-of-the-year-2015-16.html">&lt;p&gt;It is that time of year again where we look back on the year that has just passed. What went well, what could have gone better, what moments we cherished - but most importantly - who got you that 2:1 in the unit that everyone failed!&lt;/p&gt;

&lt;p&gt;Voting is now open for the &lt;strong&gt;2015/16 Lecturer of the Year&lt;/strong&gt; award! &lt;a href=&quot;https://goo.gl/forms/HkuxXZoCzQAuPYZp2&quot;&gt;You can now vote for your favourite lecturer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also add a little note telling us why you think your choice of lecturer deserves the award (although you don’t have to - you are more than welcome to just cast your vote and leave it at that). Results shall be announced at this year’s returning students reception on October 5th, where the winner shall receive a prize!&lt;/p&gt;

&lt;p&gt;(If you can’t find a lecturer on the list, please let me know on here or at &lt;a href=&quot;mailto:president@cssbristol.co.uk&quot;&gt;president@cssbristol.co.uk&lt;/a&gt; and I shall rectify this. Although, do note: Benjamin Sach is not eligible for this year’s award as he won last year)&lt;/p&gt;

&lt;p&gt;Also, to enforce the 1 vote per person limit (because clearly everyone is out to rig these things, you know?), you must be signed into your @bristol.ac.uk Google Apps account to vote (don’t worry, we don’t retain who voted for which lecturer - we’re not that evil ;) &lt;a href=&quot;https://xkcd.com/541/&quot;&gt;)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good luck to the lecturers and may the best teacher win!&lt;/p&gt;</content><author><name>Hakeem Kushoro</name></author><summary type="html">It is that time of year again where we look back on the year that has just passed. What went well, what could have gone better, what moments we cherished - but most importantly - who got you that 2:1 in the unit that everyone failed! Voting is now open for the 2015/16 Lecturer of the Year award! You can now vote for your favourite lecturer. You can also add a little note telling us why you think your choice of lecturer deserves the award (although you don’t have to - you are more than welcome to just cast your vote and leave it at that). Results shall be announced at this year’s returning students reception on October 5th, where the winner shall receive a prize! (If you can’t find a lecturer on the list, please let me know on here or at president@cssbristol.co.uk and I shall rectify this. Although, do note: Benjamin Sach is not eligible for this year’s award as he won last year) Also, to enforce the 1 vote per person limit (because clearly everyone is out to rig these things, you know?), you must be signed into your @bristol.ac.uk Google Apps account to vote (don’t worry, we don’t retain who voted for which lecturer - we’re not that evil ;) ) Good luck to the lecturers and may the best teacher win!</summary></entry><entry><title type="html">2016 BBQ Photos</title><link href="https://cssbristol.co.uk/2016/07/11/2016-summer-bbq-photos.html" rel="alternate" type="text/html" title="2016 BBQ Photos" /><published>2016-07-11T20:00:00+01:00</published><updated>2016-07-11T20:00:00+01:00</updated><id>https://cssbristol.co.uk/2016/07/11/2016-summer-bbq-photos</id><content type="html" xml:base="https://cssbristol.co.uk/2016/07/11/2016-summer-bbq-photos.html">&lt;p&gt;We held our annual CSS Summer BBQ in Brandon Hill Park on June 4. Here are the photos!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://goo.gl/photos/yLmv6sp8RroHCBbX6&quot;&gt;View the album on Google Photos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/contrib/blog/2016-07-11-css-bbq.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Ross Gardiner</name></author><summary type="html">We held our annual CSS Summer BBQ in Brandon Hill Park on June 4. Here are the photos! View the album on Google Photos</summary></entry><entry><title type="html">Wellbeing lunches</title><link href="https://cssbristol.co.uk/2016/05/26/wellbeing-lunches.html" rel="alternate" type="text/html" title="Wellbeing lunches" /><published>2016-05-26T12:36:00+01:00</published><updated>2016-05-26T12:36:00+01:00</updated><id>https://cssbristol.co.uk/2016/05/26/wellbeing-lunches</id><content type="html" xml:base="https://cssbristol.co.uk/2016/05/26/wellbeing-lunches.html">&lt;p&gt;Interested in &lt;a href=&quot;/wellbeing&quot;&gt;wellbeing&lt;/a&gt; in the department? Bring your lunch to 3.22MVB on a Friday.&lt;/p&gt;

&lt;p&gt;We’ll be chatting informally about anything and everything to do with wellbeing and mental health. Thanks go to &lt;a href=&quot;http://www.cs.bris.ac.uk/~kovacs/&quot;&gt;Tim Kovacs&lt;/a&gt;, who is organising this. If you have any ideas on how to make the faculty a healthier and happier place he would love to hear them.&lt;/p&gt;

&lt;p&gt;All students and staff from the faculty (and other faculties) are welcome.&lt;/p&gt;

&lt;p&gt;The lunches will be at the same time and place for the next three Fridays - the last being June 10.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://calendar.google.com/calendar/render?eid=aW8wNG1rM2I4dGxrc2U1ZDhtY2o2MTM5a2tfMjAxNjA1MjdUMTEwMDAwWiBjc3NicmlzdG9sLmNvLnVrX2NtbWI3N2k0a2Q2ZDlva2Z2NW5jMXBpYm4wQGc&amp;amp;sf=true&amp;amp;output=xml#eventpage_6&quot;&gt;Event on Google Calendar&lt;/a&gt;&lt;/p&gt;</content><author><name>Ross Gardiner</name></author><summary type="html">Interested in wellbeing in the department? Bring your lunch to 3.22MVB on a Friday. We’ll be chatting informally about anything and everything to do with wellbeing and mental health. Thanks go to Tim Kovacs, who is organising this. If you have any ideas on how to make the faculty a healthier and happier place he would love to hear them. All students and staff from the faculty (and other faculties) are welcome. The lunches will be at the same time and place for the next three Fridays - the last being June 10. Event on Google Calendar</summary></entry><entry><title type="html">Hello, world</title><link href="https://cssbristol.co.uk/2016/05/21/hello-world.html" rel="alternate" type="text/html" title="Hello, world" /><published>2016-05-21T01:42:00+01:00</published><updated>2016-05-21T01:42:00+01:00</updated><id>https://cssbristol.co.uk/2016/05/21/hello-world</id><content type="html" xml:base="https://cssbristol.co.uk/2016/05/21/hello-world.html">&lt;p&gt;Welcome to the updated CSS website!&lt;/p&gt;

&lt;p&gt;I’m Ross, the new CSS webmaster. Please let me know if you have any suggestions for this site: you can contact me at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webmaster@cssbristol.co.uk&lt;/code&gt;, file an issue on the &lt;a href=&quot;https://github.com/cssbristol/cssbristol.github.io&quot;&gt;website repository&lt;/a&gt; or come and find me in person.&lt;/p&gt;

&lt;p&gt;If you want to write a tutorial, blog post or anything else for the site, go right ahead! You can fork the repository, make your changes and submit a pull request. I’ll get any changes merged as quickly as possible. A &lt;a href=&quot;/tutorials/post-on-the-site/&quot;&gt;full tutorial&lt;/a&gt; is available (it’s really easy, I promise!)&lt;/p&gt;</content><author><name>Ross Gardiner</name></author><summary type="html">Welcome to the updated CSS website! I’m Ross, the new CSS webmaster. Please let me know if you have any suggestions for this site: you can contact me at webmaster@cssbristol.co.uk, file an issue on the website repository or come and find me in person. If you want to write a tutorial, blog post or anything else for the site, go right ahead! You can fork the repository, make your changes and submit a pull request. I’ll get any changes merged as quickly as possible. A full tutorial is available (it’s really easy, I promise!)</summary></entry></feed>